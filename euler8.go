package main

import (
	"container/ring"
	"strconv"
)

const euler8input = ``

func init() {
	solutions[8] = euler8
}

func euler8() {
	best := 0

	r := ring.New(13)

	for i := 0; i < len(euler8input); i++ {
		r.Value = number(i)
		r = r.Next()

		if i < 12 {
			continue
		}

		res := product(r)
		if res > best {
			best = res
		}
	}

	println(best)
}

func product(r *ring.Ring) int {
	res := 1
	r.Do(func(i interface{}) { res *= i.(int) })
	return res
}

func number(i int) int {
	res, _ := strconv.Atoi(euler8input[i : i+1])
	return res
}
